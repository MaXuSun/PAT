#include <iostream>
#include <stdio.h>
#include <vector>
#include <math.h>
using namespace std;

typedef struct node{
    int a,b;
}Node;
vector<int> primes;
vector<Node> result;

bool isPrime(int n){
    if(n<=1)return false;
    int nx = sqrt(n);
    for(int i = 2;i <= nx;i++){
        if(n%i==0)return false;
    }
    return true;
}

void getPrime(){
    for(int i = 2;i <= 100000;i++){
        if(isPrime(i))primes.push_back(i);
    }
}

int main(){
    int n;
    scanf("%d",&n);
    if(n==1){
        printf("1=1");
        return 0;
    }

    getPrime();                         //得到素数表
    int sqr = sqrt(n);
    printf("%d=",n);
    //n的素数分解，最多只有一个 > sqrt(n) 的素数
    //下面for循环找到所有 < sqrt(n) 的素数
    for(int i = 0;i < primes.size()&&primes[i]<= sqr;i++){
        if(n%primes[i]==0){
            Node no;
            no.a = primes[i];
            no.b = 0;
            while(n%primes[i]==0){
                no.b++;
                n/=primes[i];
            }
            result.push_back(no);
        }
        if(n==1)break;      //提前结束循环
    }

    if(n!=1){               //如果结束时n!=1,那就说明这个素数大于 sqrt(n)
        Node no;
        no.a = n;no.b=1;
        result.push_back(no);
    }

    for(int i = 0;i < result.size();i++){
        if(i>0)printf("*");
        printf("%d",result[i].a);
        if(result[i].b>1){
            printf("^%d",result[i].b);
        }
    }

    return 0;
}
