#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <math.h>
#define MAXN 100010
using namespace std;

int n;
double p,r;
int min_layer = MAXN;
int min_num=0;
vector<int> T[MAXN];
bool vis[MAXN]={false};

void DFS(int s,int layer){
    vis[s]=true;
    if(T[s].size()==0){
        if(layer<min_layer){
            min_layer = layer;
            min_num = 1;
        }else if(layer==min_layer){
            min_num++;
        }
    }

    for(int i = 0;i < T[s].size();i++){
        int v = T[s][i];
        if(!vis[v]){
            DFS(v,layer+1);
        }
    }
}

int main(){
    int k,v;
    scanf("%d %lf %lf",&n,&p,&r);
    for(int i = 0;i < n;i++){
        scanf("%d",&k);
        for(int j = 0;j < k;j++){
            scanf("%d",&v);
            T[i].push_back(v);
        }
    }
    DFS(0,0);
    double result = pow(1+r*0.01,min_layer)*p;
    printf("%.4f %d",result,min_num);

    return 0;
}
