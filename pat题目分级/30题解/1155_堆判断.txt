#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#define MAXN 1010
using namespace std;
typedef struct node{
    int key,lchild,rchild;
}Node;
Node HEAP[MAXN];
int n;
vector<int> path;
bool isbig=true;
bool issmall = true;

void  initHEAP(){               //初始化空堆
    for(int i = 1;i < MAXN;i++){
        HEAP[i].key = 0;
        HEAP[i].lchild = 2*i;
        HEAP[i].rchild = 2*i+1;
    }
}

void checkHeap(){               //检查是哪种堆
    for(int i = 2;i <= n;i++){
        if(HEAP[i/2].key>HEAP[i].key)issmall=false;
        if(HEAP[i/2].key<HEAP[i].key)isbig=false;
    }
}

void DFS(int s){
    if(HEAP[s].lchild > n && HEAP[s].rchild > n){
        for(int i = 0;i < path.size();i++){
            if(i!=0)printf(" ");
            printf("%d",path[i]);
        }
        printf(" %d\n",HEAP[s].key);
        return;
    }
    path.push_back(HEAP[s].key);
    if(HEAP[s].rchild<=n)DFS(HEAP[s].rchild);
    if(HEAP[s].lchild<=n)DFS(HEAP[s].lchild);
    path.pop_back();
}

int main(){
    initHEAP();
    cin >> n;
    for(int i = 1;i <= n;i++){
        cin >> HEAP[i].key;
    }
    DFS(1);
    checkHeap();

    if(isbig)printf("Max Heap");
    else if(issmall)printf("Min Heap");
    else printf("Not Heap");

    return 0;
}
