#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef struct node{
    int val;
    struct node *left,*right;
}Node;
//平衡二叉树插入结点有4种
//1. 新来的结点插入到A的左子树的左子树  A右旋
//2. 新来的结点插入到A的左子树的右子树  A的左子树左旋,A右旋
//3. 新来的结点插入到A的右子树的右子树  A左旋
//4. 新来的结点插入到A的右子树的左子树  A的右子树右旋,A左旋
Node* leftRotate(Node* tree){
    Node *temp = tree->right;
    tree->right=temp->left;
    temp->left = tree;
    return temp;
}

Node* rightRotate(Node* tree){
    Node *temp = tree->left;
    tree->left = temp->right;
    temp->right = tree;
    return temp;
}

Node* leftRightRotate(Node* tree){
    tree->left = leftRotate(tree->left);
    return rightRotate(tree);
}

Node* rightLeftRotate(Node* tree){
    tree->right = rightRotate(tree->right);
    return leftRotate(tree);
}

int getH(Node* tree){
    if(tree==NULL)return 0;
    int l = getH(tree->left);
    int r = getH(tree->right);
    return max(l,r)+1;
}

Node* insertT(Node* tree,int val){
    if(tree==NULL){             //如果递归发现根为null
        tree = new node();
        tree->val = val;
    }else if(tree->val>val){
        tree->left = insertT(tree->left,val);
        int l = getH(tree->left),r = getH(tree->right);
        if(l-r>1){
            if(val < tree->left->val)
                tree = rightRotate(tree);
            else
                tree = leftRightRotate(tree);
        }
    }else{
        tree->right = insertT(tree->right,val);
        int l = getH(tree->left),r=getH(tree->right);
        if(r-l>1){
            if(val>tree->right->val)
                tree = leftRotate(tree);
            else
                tree = rightLeftRotate(tree);
        }
    }
    return tree;
}
int isComplete = 1,after = 0;
vector<int> levelOrder(Node* tree){
    vector<int> v;
    queue<Node*> q;
    q.push(tree);
    while(!q.empty()){
        Node *temp = q.front();
        q.pop();
        v.push_back(temp->val);
        if(temp->left!=NULL){
            if(after)isComplete=0;  //如果遇到了叶子结点后又遇到了非叶结点,则不是完全二叉树
            q.push(temp->left);
        }else after = 1;    //用来标记已经遇到了叶子结点
        if(temp->right!=NULL){
            if(after)isComplete=0;
            q.push(temp->right);
        }else after=1;
    }
    return v;
}
int main(){
    int n,temp;
    scanf("%d",&n);
    Node* tree = NULL;
    for(int i = 0;i < n;i++){
        scanf("%d",&temp);
        tree = insertT(tree,temp);
    }
    vector<int> v = levelOrder(tree);
    for(int i = 0;i < v.size();i++){
        if(i!=0)printf(" ");
        printf("%d",v[i]);
    }
    printf("\n%s",isComplete?"YES":"NO");
    return 0;
}
