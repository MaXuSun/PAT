#include <stdio.h>
#include <iostream>
#include <vector>
#include <map>
#include <string>
#define MAXN 2010
#define INF 0x7fffffff
using namespace std;

int n,k,G[MAXN][MAXN];
int weight[MAXN]={0},numPerson=0;
bool vis[MAXN]={false};
map<int,string> int2string;
map<string,int> string2int;
map<string,int> Gang;

int change(string str){
    if(string2int.find(str)!=string2int.end()){
        return string2int[str];
    }else{
        string2int[str] = numPerson;
        int2string[numPerson] = str;
        return numPerson++;
    }
}

void DFS(int nowVisit,int& head,int& numMember,int& totalValue){
    numMember++;
    vis[nowVisit]=true;
    if(weight[nowVisit]>weight[head]){
        head = nowVisit;
    }
    for(int i = 0;i < numPerson;i++){
        //这一题主要就是注意这里的写法，这是计算同一个连通分量中所有边权和
        if(G[nowVisit][i]>0){
            totalValue+=G[nowVisit][i];
            G[nowVisit][i] = G[i][nowVisit] = 0;
            if(!vis[i]){
                DFS(i,head,numMember,totalValue);
            }
        }
    }
}
void DFSTravel(){
    for(int i = 0;i < numPerson;i++){
        if(vis[i]==false){
            int head = i,numMember = 0,totalValue = 0;
            DFS(i,head,numMember,totalValue);
            if(numMember>2 && totalValue > k){
                Gang[int2string[head]] = numMember;
            }
        }
    }
}
int main(){
    int w;
    string str1,str2;
    cin >> n >> k;
    for(int i = 0;i < n;i++){
        cin >> str1 >> str2 >> w;
        int id1 = change(str1);
        int id2 = change(str2);
        weight[id1] += w;
        weight[id2] += w;
        G[id1][id2] += w;
        G[id2][id1] += w;
    }
    DFSTravel();
    cout << Gang.size() << endl;
    map<string,int>::iterator it;
    for(it = Gang.begin();it!=Gang.end();it++){
        cout << it->first << " " << it->second << endl;
    }
    return 0;
}
